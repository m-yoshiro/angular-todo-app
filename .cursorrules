# Angular 20 TODO App - Cursor Project Rules

## Project Overview
This is an Angular 20 TODO application built with modern Angular features including:
- Stand-alone components (default in v20)
- Signals for state management
- Angular Router
- SSR (Server-Side Rendering) with Incremental Hydration
- Zoneless change detection (enabled)

## Current Project Status
- âœ… Angular 20 project created with SSR
- âœ… Zoneless change detection enabled
- âœ… Basic app structure in place
- ðŸ”„ Ready for feature development
- ðŸ“‹ Detailed roadmap with 17 PRs created in `/plans/detailed-roadmap.md`
- ðŸ“Š Task tracker available in `/plans/task-tracker.md`

## Development Roadmap
The project follows a 6-week development plan with 17 PRs:

**Phase 1 (Week 1)**: Foundation & Core Models
- PR #1: Setup Project Structure & Models
- PR #2: Basic Todo Service (Memory-based)
- PR #3: Todo List Component (Basic)

**Phase 2 (Week 2)**: Core Functionality
- PR #4: Todo Item Component
- PR #5: Add Todo Form Component
- PR #6: Integrate Components & Basic Styling

**Phase 3 (Week 3)**: Advanced Features
- PR #7: Todo Filtering & Statistics
- PR #8: Local Storage Persistence
- PR #9: Signal-based Forms (Experimental)

**Phase 4 (Week 4)**: Performance & Optimization
- PR #10: Performance Optimizations
- PR #11: Incremental Hydration Tuning
- PR #12: Accessibility Improvements

**Phase 5 (Week 5)**: Testing & Quality
- PR #13: Comprehensive Unit Testing
- PR #14: E2E Testing with Playwright
- PR #15: Code Quality & Linting

**Phase 6 (Week 6)**: Deployment & Documentation
- PR #16: CI/CD Pipeline
- PR #17: Documentation & README

## Development Environment
- **Node.js**: 20.11.1+ (LTS recommended)
- **Angular CLI**: v20
- **Package Manager**: npm
- **IDE**: VS Code with Angular Language Service

## Project Structure
```
src/
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ components/          # Stand-alone components
â”‚   â”‚   â”œâ”€â”€ todo-list/       # TodoListComponent
â”‚   â”‚   â”œâ”€â”€ todo-item/       # TodoItemComponent
â”‚   â”‚   â”œâ”€â”€ add-todo-form/   # AddTodoFormComponent
â”‚   â”‚   â””â”€â”€ todo-filter/     # TodoFilterComponent
â”‚   â”œâ”€â”€ services/           # Injectable services
â”‚   â”‚   â”œâ”€â”€ todo.service.ts
â”‚   â”‚   â””â”€â”€ storage.service.ts
â”‚   â”œâ”€â”€ models/             # TypeScript interfaces/types
â”‚   â”‚   â””â”€â”€ todo.model.ts
â”‚   â”œâ”€â”€ app.ts              # Root component
â”‚   â”œâ”€â”€ app.config.ts       # Application configuration
â”‚   â””â”€â”€ app.routes.ts       # Route definitions
â”œâ”€â”€ assets/                 # Static assets
â””â”€â”€ styles/                 # Global styles (SCSS)
```

## Current Development Guidelines

### 1. PR-Based Development
- Each feature is developed in a separate PR
- PRs are small and focused (2-5 hours of work)
- Follow the detailed roadmap in `/plans/detailed-roadmap.md`
- Update task tracker in `/plans/task-tracker.md` with progress

### 2. Branch Naming Convention
```
feature/XX-description    # For features (XX = PR number)
fix/XX-description        # For bug fixes
docs/XX-description       # For documentation
```

### 3. Component Architecture
- Use **stand-alone components** (no NgModules)
- Follow Angular naming conventions: `ComponentNameComponent`
- Use `@Input()` and `@Output()` for component communication
- Implement `OnDestroy` for cleanup when necessary
- Use `inject()` function for dependency injection

### 4. State Management with Signals
```typescript
// âœ… Preferred: Use signals for reactive state
const todos = signal<Todo[]>([]);
const completedTodos = computed(() =>
  todos().filter(todo => todo.completed)
);

// âœ… Use effect() for side effects
effect(() => {
  console.log('Todos changed:', todos());
});

// âœ… Use computed() for derived state
const todoStats = computed(() => ({
  total: todos().length,
  completed: todos().filter(t => t.completed).length,
  remaining: todos().filter(t => !t.completed).length
}));
```

### 5. Template Syntax (Angular v20)
```html
<!-- âœ… Use new control flow syntax -->
@for (todo of todos(); track todo.id) {
  <app-todo-item [todo]="todo" />
}

@if (todos().length === 0) {
  <p>No todos found</p>
}

<!-- âœ… Use signals in templates -->
<div>{{ todoStats().completed }} of {{ todoStats().total }} completed</div>

<!-- âœ… Use @switch for multiple conditions -->
@switch (filterType()) {
  @case ('all') { <span>All todos</span> }
  @case ('active') { <span>Active todos</span> }
  @case ('completed') { <span>Completed todos</span> }
}
```

### 6. TypeScript Best Practices
- Use strict type checking
- Define interfaces for all data models
- Use `readonly` for immutable data
- Prefer `const` assertions for static data
- Use proper typing for signals and computed values

### 7. Styling Guidelines
- Use SCSS for component styles
- Follow BEM methodology for CSS classes
- Use Angular's `:host` selector for component-specific styles
- Implement responsive design with CSS Grid/Flexbox
- Use CSS custom properties for theming

## Development Workflow

### 1. Feature Development Process
1. Check current status in `/plans/task-tracker.md`
2. Create feature branch: `git checkout -b feature/XX-description`
3. Implement feature following the roadmap tasks
4. Write unit tests for all new code
5. Update task tracker with progress
6. Create pull request with descriptive title
7. Follow PR template and review checklist

### 2. Code Quality Standards
- Run `ng lint` before committing
- Ensure all tests pass with `ng test`
- Use Prettier for code formatting
- Follow ESLint Angular rules
- Achieve 90%+ code coverage

### 3. Testing Strategy
- **Unit Tests**: Use Web Test Runner (default)
- **E2E Tests**: Use Playwright (Phase 5)
- **Component Testing**: Test component logic and template bindings
- **Service Testing**: Mock dependencies and test business logic
- **Signal Testing**: Test signal interactions and side effects

## File Naming Conventions
- Components: `kebab-case.component.ts`
- Services: `kebab-case.service.ts`
- Models: `kebab-case.model.ts`
- Templates: `component-name.component.html`
- Styles: `component-name.component.scss`

## Import Organization
```typescript
// 1. Angular imports
import { Component, inject, signal, computed } from '@angular/core';

// 2. Third-party imports
import { Observable } from 'rxjs';

// 3. Application imports
import { TodoService } from '../services/todo.service';
import { Todo } from '../models/todo.model';
```

## Performance Guidelines
- Use `OnPush` change detection strategy when possible
- Implement `trackBy` functions for `@for` loops
- Optimize signal computations to avoid unnecessary recalculations
- Use `toSignal()` to convert Observables to Signals
- Optimize bundle size with tree-shaking
- Monitor hydration performance with incremental hydration

## Error Handling
- Use Angular's error handling mechanisms
- Implement proper error boundaries
- Log errors appropriately
- Provide user-friendly error messages
- Handle localStorage errors gracefully

## Accessibility (A11y) Requirements
- Use semantic HTML elements
- Implement proper ARIA attributes
- Ensure keyboard navigation works
- Test with screen readers
- Maintain proper color contrast ratios
- Add focus management
- Ensure WCAG 2.1 AA compliance

## Security Guidelines
- Sanitize user input
- Use Angular's built-in XSS protection
- Implement proper authentication/authorization
- Follow OWASP security guidelines
- Handle localStorage security considerations

## Documentation Standards
- Use JSDoc comments for public APIs
- Document complex business logic
- Keep README.md updated
- Maintain changelog for releases
- Document experimental features (signal forms)
- Update roadmap progress regularly

## Git Commit Guidelines
Use conventional commits format:
```
feat: add todo filtering functionality
fix: resolve signal update issue in todo service
docs: update README with setup instructions
test: add unit tests for TodoItemComponent
refactor: simplify component logic using signals
perf: optimize signal computations for better performance
```

## Performance Monitoring
- Use Angular DevTools for debugging
- Monitor Core Web Vitals
- Track bundle size changes
- Measure hydration performance
- Use Lighthouse for performance audits
- Monitor signal performance

## Deployment Strategy
- Build with `ng build` for production
- Use SSR build for better SEO
- Deploy to Vercel/Cloudflare Pages
- Set up CI/CD with GitHub Actions
- Configure environment variables
- Set up performance monitoring

## Learning Focus Areas
- Modern Angular patterns vs traditional approaches
- Signals for state management
- Zoneless change detection benefits
- SSR and incremental hydration strategies
- Performance optimization techniques
- Testing strategies for Angular applications

## Notes for Cursor
- **ALWAYS** check the `/plans` directory for current development status
- Follow the detailed roadmap in `/plans/detailed-roadmap.md`
- Update progress in `/plans/task-tracker.md` when implementing features
- Maintain consistency with Angular v20 best practices
- Prioritize modern Angular patterns over legacy approaches
- Focus on one PR at a time following the roadmap
- Ensure each PR is small and focused (2-5 hours of work)
- Write comprehensive tests for all new functionality
- Document experimental features clearly
- Consider performance impact of all changes
- Maintain accessibility standards throughout development

## Current Priority
**Next Task**: PR #1 - Setup Project Structure & Models
- Create `src/app/models/` directory
- Create `Todo` interface
- Create `src/app/services/` and `src/app/components/` directories
- Update `tsconfig.json` with `typeCheckHostBindings: true`
- Add basic SCSS variables for theming

**Goal**: Complete Phase 1 (PRs #1-3) by end of Week 1
